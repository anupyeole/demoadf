{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DFanup"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"LS_Cont2StreamADf_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Cont2StreamADf'"
		},
		"LS_Staging_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Staging'"
		},
		"LS_sqltab_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_sqltab'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://usecase1adls99.dfs.core.windows.net/"
		},
		"LS_Cont2StreamADf_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://usecase1adls99.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://usecase1adls99.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_2filescopiedintosqltable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_Jsonstream",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Jsonstream')]",
				"[concat(variables('factoryId'), '/datasets/DS_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_SCD2_Purchase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SCD2_purchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T11:31:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SCD2_purchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_sink1_SCD2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_sink1_SCD2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_sink1_SCD2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_transformation_purchase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_transformation_purchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_transformation_purchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_datacopyparuet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_rawcsvtocleansedparquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_rawParquetsink1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T11:31:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_rawcsvtocleansedparquet')]",
				"[concat(variables('factoryId'), '/datasets/DS_rawParquetsink1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_dataflow3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_dataflowPurchase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow incremental",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_transformation_purchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T11:31:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_transformation_purchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Incremental data last 1 day",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcnow(),-1)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFolderPath": "RAW",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_incre",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_incre_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_incre')]",
				"[concat(variables('factoryId'), '/datasets/DS_incre_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://github.com/anupyeole/demoadf",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Restapisource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_restapisink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "End",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://github.com/anupyeole/demoadf",
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Restapisource')]",
				"[concat(variables('factoryId'), '/datasets/DS_restapisink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DocIncreUpdate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Production",
					"table": "DocIncreNewUpdate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Document')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DocumentNode",
						"type": "hierarchyid"
					},
					{
						"name": "DocumentLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "Owner",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FolderFlag",
						"type": "bit"
					},
					{
						"name": "FileName",
						"type": "nvarchar"
					},
					{
						"name": "FileExtension",
						"type": "nvarchar"
					},
					{
						"name": "Revision",
						"type": "nchar"
					},
					{
						"name": "ChangeNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "DocumentSummary",
						"type": "nvarchar"
					},
					{
						"name": "Document",
						"type": "varbinary"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "Document"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_IOT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Cont2StreamADf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "container2stream"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Cont2StreamADf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Jsonstream')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Cont2StreamADf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "0_823aef7406dd4a1c9cd79df58dbd3e50_1.json",
						"fileSystem": "container2stream"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"messageId": {
							"type": "integer"
						},
						"deviceId": {
							"type": "string"
						},
						"temperature": {
							"type": "number"
						},
						"humidity": {
							"type": "number"
						},
						"EventProcessedUtcTime": {
							"type": "string"
						},
						"PartitionId": {
							"type": "integer"
						},
						"EventEnqueuedUtcTime": {
							"type": "string"
						},
						"IoTHub": {
							"type": "object",
							"properties": {
								"MessageId": {
									"type": "null"
								},
								"CorrelationId": {
									"type": "null"
								},
								"ConnectionDeviceId": {
									"type": "string"
								},
								"ConnectionDeviceGenerationId": {
									"type": "string"
								},
								"EnqueuedTime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Cont2StreamADf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000-545aa35f-608b-4323-9abf-17cde60b1c09-c000.snappy.parquet",
						"folderPath": "CURATED/scd2isactive",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Parquet1df2sourcecurated')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000-c171ff0e-ff68-4acd-b09b-9c28018a55bd-c000.snappy.parquet",
						"folderPath": "CURATED",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PurchaseOrderID",
						"type": "INT32"
					},
					{
						"name": "RevisionNumber",
						"type": "INT32"
					},
					{
						"name": "Status",
						"type": "INT32"
					},
					{
						"name": "EmployeeID",
						"type": "INT32"
					},
					{
						"name": "VendorID",
						"type": "INT32"
					},
					{
						"name": "ShipMethodID",
						"type": "INT32"
					},
					{
						"name": "OrderDate",
						"type": "DATE"
					},
					{
						"name": "ShipDate",
						"type": "DATE"
					},
					{
						"name": "SubTotal",
						"type": "INT32"
					},
					{
						"name": "TaxAmt",
						"type": "UTF8"
					},
					{
						"name": "Freight",
						"type": "INT32"
					},
					{
						"name": "TotalDue",
						"type": "INT32"
					},
					{
						"name": "ModifiedDate",
						"type": "UTF8"
					},
					{
						"name": "seq_id",
						"type": "INT64"
					},
					{
						"name": "PurchaseOrderDetailID",
						"type": "INT32"
					},
					{
						"name": "DueDate",
						"type": "DATE"
					},
					{
						"name": "OrderQty",
						"type": "INT32"
					},
					{
						"name": "ProductID",
						"type": "INT32"
					},
					{
						"name": "UnitPrice",
						"type": "INT32"
					},
					{
						"name": "LineTotal",
						"type": "INT32"
					},
					{
						"name": "ReceivedQty",
						"type": "INT32"
					},
					{
						"name": "RejectedQty",
						"type": "INT32"
					},
					{
						"name": "StockedQty",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "CURATED/scd2data",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Parquetsink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000-f051e559-c8b9-4e2a-a97e-c93afb337612-c000.snappy.parquet",
						"folderPath": "CURATED",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PurchaseOrderID",
						"type": "INT32"
					},
					{
						"name": "RevisionNumber",
						"type": "INT32"
					},
					{
						"name": "Status",
						"type": "INT32"
					},
					{
						"name": "EmployeeID",
						"type": "INT32"
					},
					{
						"name": "VendorID",
						"type": "INT32"
					},
					{
						"name": "ShipMethodID",
						"type": "INT32"
					},
					{
						"name": "OrderDate",
						"type": "DATE"
					},
					{
						"name": "ShipDate",
						"type": "DATE"
					},
					{
						"name": "SubTotal",
						"type": "INT32"
					},
					{
						"name": "TaxAmt",
						"type": "UTF8"
					},
					{
						"name": "Freight",
						"type": "INT32"
					},
					{
						"name": "TotalDue",
						"type": "INT32"
					},
					{
						"name": "ModifiedDate",
						"type": "UTF8"
					},
					{
						"name": "seq_id",
						"type": "INT64"
					},
					{
						"name": "PurchaseOrderDetailID",
						"type": "INT32"
					},
					{
						"name": "DueDate",
						"type": "DATE"
					},
					{
						"name": "OrderQty",
						"type": "INT32"
					},
					{
						"name": "ProductID",
						"type": "INT32"
					},
					{
						"name": "UnitPrice",
						"type": "INT32"
					},
					{
						"name": "LineTotal",
						"type": "INT32"
					},
					{
						"name": "ReceivedQty",
						"type": "INT32"
					},
					{
						"name": "RejectedQty",
						"type": "INT32"
					},
					{
						"name": "StockedQty",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Restapisource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "diabetes (2).csv",
						"folderPath": "RAW/RestApi/Source",
						"fileSystem": "container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PassengerId",
						"type": "String"
					},
					{
						"name": "Survived",
						"type": "String"
					},
					{
						"name": "Pclass",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Sex",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "SibSp",
						"type": "String"
					},
					{
						"name": "Parch",
						"type": "String"
					},
					{
						"name": "Ticket",
						"type": "String"
					},
					{
						"name": "Fare",
						"type": "String"
					},
					{
						"name": "Cabin",
						"type": "String"
					},
					{
						"name": "Embarked",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_curatedParquet2sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "CURATED/SCD2sink",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PurchaseOrderID",
						"type": "INT32"
					},
					{
						"name": "RevisionNumber",
						"type": "INT32"
					},
					{
						"name": "Status",
						"type": "INT32"
					},
					{
						"name": "EmployeeID",
						"type": "INT32"
					},
					{
						"name": "VendorID",
						"type": "INT32"
					},
					{
						"name": "ShipMethodID",
						"type": "INT32"
					},
					{
						"name": "OrderDate",
						"type": "DATE"
					},
					{
						"name": "ShipDate",
						"type": "DATE"
					},
					{
						"name": "SubTotal",
						"type": "INT32"
					},
					{
						"name": "TaxAmt",
						"type": "UTF8"
					},
					{
						"name": "Freight",
						"type": "INT32"
					},
					{
						"name": "TotalDue",
						"type": "INT32"
					},
					{
						"name": "ModifiedDate",
						"type": "UTF8"
					},
					{
						"name": "seq_id",
						"type": "INT64"
					},
					{
						"name": "PurchaseOrderDetailID",
						"type": "INT32"
					},
					{
						"name": "DueDate",
						"type": "DATE"
					},
					{
						"name": "OrderQty",
						"type": "INT32"
					},
					{
						"name": "ProductID",
						"type": "INT32"
					},
					{
						"name": "UnitPrice",
						"type": "INT32"
					},
					{
						"name": "LineTotal",
						"type": "INT32"
					},
					{
						"name": "ReceivedQty",
						"type": "INT32"
					},
					{
						"name": "RejectedQty",
						"type": "INT32"
					},
					{
						"name": "StockedQty",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_curatedParquettransformed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "CLEANSED",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_docIncreNew')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Production",
					"table": "DocIncrementalNew"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_empNew')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Staging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "employeeNew"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_empNewUpdate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Staging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "employeesNewUpdate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_employees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Staging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "employee_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "varchar"
					},
					{
						"name": "last_name",
						"type": "varchar"
					},
					{
						"name": "email",
						"type": "varchar"
					},
					{
						"name": "hire_date",
						"type": "date"
					},
					{
						"name": "department",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					},
					{
						"name": "region_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_incre')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "RAW",
						"fileSystem": "container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Pregnancies",
						"type": "String"
					},
					{
						"name": "Glucose",
						"type": "String"
					},
					{
						"name": "BloodPressure",
						"type": "String"
					},
					{
						"name": "SkinThickness",
						"type": "String"
					},
					{
						"name": "Insulin",
						"type": "String"
					},
					{
						"name": "BMI",
						"type": "String"
					},
					{
						"name": "DiabetesPedigreeFunction",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Outcome",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_incre_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "CLEANSED",
						"fileSystem": "container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_rawParquetsink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "purchaseheader.parquet",
						"folderPath": "RAW/Rawparquet",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_rawParquetsink2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "purchaseorder.parquet",
						"folderPath": "RAW/Rawparquet",
						"fileSystem": "container1"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_rawcsvtocleansedparquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "purchaseorder.csv",
						"folderPath": "RAW",
						"fileSystem": "container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"nullValue": "EMAILNULL",
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PurchaseOrderID",
						"type": "String"
					},
					{
						"name": "PurchaseOrderDetailID",
						"type": "String"
					},
					{
						"name": "DueDate",
						"type": "String"
					},
					{
						"name": "OrderQty",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "LineTotal",
						"type": "String"
					},
					{
						"name": "ReceivedQty",
						"type": "String"
					},
					{
						"name": "RejectedQty",
						"type": "String"
					},
					{
						"name": "StockedQty",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_restapisink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "RAW/RestApi/Sink",
						"fileSystem": "container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_sqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Staging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Jsonstream"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Staging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_streamRasbPiSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Cont2StreamADf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "0_823aef7406dd4a1c9cd79df58dbd3e50_1.json",
						"fileSystem": "container2stream"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"messageId": {
							"type": "integer"
						},
						"deviceId": {
							"type": "string"
						},
						"temperature": {
							"type": "number"
						},
						"humidity": {
							"type": "number"
						},
						"EventProcessedUtcTime": {
							"type": "string"
						},
						"PartitionId": {
							"type": "integer"
						},
						"EventEnqueuedUtcTime": {
							"type": "string"
						},
						"IoTHub": {
							"type": "object",
							"properties": {
								"MessageId": {
									"type": "null"
								},
								"CorrelationId": {
									"type": "null"
								},
								"ConnectionDeviceId": {
									"type": "string"
								},
								"ConnectionDeviceGenerationId": {
									"type": "string"
								},
								"EnqueuedTime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Cont2StreamADf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Cont2StreamADf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Cont2StreamADf_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Cont2StreamADf_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Staging')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_Staging_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_sqltab')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_sqltab_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2023-01-18T05:25:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Document",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DS_docIncreNew",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_docIncreNew",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_DocIncreUpdate",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DocumentNode as binary,",
						"          DocumentLevel as integer,",
						"          Title as string,",
						"          Owner as integer,",
						"          FolderFlag as boolean,",
						"          FileName as string,",
						"          FileExtension as string,",
						"          Revision as string,",
						"          ChangeNumber as integer,",
						"          Status as integer,",
						"          DocumentSummary as string,",
						"          Document as binary,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          DocumentNode as binary,",
						"          DocumentLevel as integer,",
						"          Title as string,",
						"          Owner as integer,",
						"          FolderFlag as boolean,",
						"          FileName as string,",
						"          FileExtension as string,",
						"          Revision as string,",
						"          ChangeNumber as integer,",
						"          Status as integer,",
						"          DocumentSummary as string,",
						"          Document as binary,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          isactivecolumn as integer,",
						"          seq_id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"derivedColumn2 keyGenerate(output(seq_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"source1 derive(isactivecolumn = 0) ~> derivedColumn2",
						"source2 select(mapColumn(",
						"          sDocumentNode = DocumentNode,",
						"          sDocumentLevel = DocumentLevel,",
						"          sTitle = Title,",
						"          sOwner = Owner,",
						"          sFolderFlag = FolderFlag,",
						"          sFileName = FileName,",
						"          sFileExtension = FileExtension,",
						"          sRevision = Revision,",
						"          sChangeNumber = ChangeNumber,",
						"          sStatus = Status,",
						"          sDocumentSummary = DocumentSummary,",
						"          sDocument = Document,",
						"          srowguid = rowguid,",
						"          sModifiedDate = ModifiedDate,",
						"          isactivecolumn,",
						"          seq_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1, select1 lookup(Owner == sOwner,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(sOwner)) ~> filter1",
						"filter1 select(mapColumn(",
						"          DocumentNode,",
						"          DocumentLevel,",
						"          Title,",
						"          Owner,",
						"          FolderFlag,",
						"          FileName,",
						"          FileExtension,",
						"          Revision,",
						"          ChangeNumber,",
						"          Status,",
						"          DocumentSummary,",
						"          Document,",
						"          rowguid,",
						"          ModifiedDate,",
						"          isactivecolumn,",
						"          seq_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(isactivecolumn = 0) ~> derivedColumn3",
						"derivedColumn3 alterRow(updateIf(1==1)) ~> alterRow1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['seq_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Document')]",
				"[concat(variables('factoryId'), '/datasets/DS_docIncreNew')]",
				"[concat(variables('factoryId'), '/datasets/DS_DocIncreUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SCD2_purchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Parquet1df2sourcecurated",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DS_Parquet1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_Parquet2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "isactiveadding"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PurchaseOrderID as integer,",
						"          RevisionNumber as integer,",
						"          Status as integer,",
						"          EmployeeID as integer,",
						"          VendorID as integer,",
						"          ShipMethodID as integer,",
						"          OrderDate as date,",
						"          ShipDate as date,",
						"          SubTotal as integer,",
						"          TaxAmt as string,",
						"          Freight as integer,",
						"          TotalDue as integer,",
						"          ModifiedDate as string,",
						"          seq_id as long,",
						"          PurchaseOrderDetailID as integer,",
						"          DueDate as date,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as integer,",
						"          LineTotal as integer,",
						"          ReceivedQty as integer,",
						"          RejectedQty as integer,",
						"          StockedQty as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          PurchaseOrderID as integer,",
						"          RevisionNumber as integer,",
						"          Status as integer,",
						"          EmployeeID as integer,",
						"          VendorID as integer,",
						"          ShipMethodID as integer,",
						"          OrderDate as date,",
						"          ShipDate as date,",
						"          SubTotal as integer,",
						"          TaxAmt as string,",
						"          Freight as integer,",
						"          TotalDue as integer,",
						"          ModifiedDate as string,",
						"          seq_id as long,",
						"          PurchaseOrderDetailID as integer,",
						"          DueDate as date,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as integer,",
						"          LineTotal as integer,",
						"          ReceivedQty as integer,",
						"          RejectedQty as integer,",
						"          StockedQty as integer,",
						"          isactive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source2",
						"source1 derive(isactive = 1) ~> isactiveadding",
						"source2 select(mapColumn(",
						"          s_PurchaseOrderID = PurchaseOrderID,",
						"          s_RevisionNumber = RevisionNumber,",
						"          s_Status = Status,",
						"          s_EmployeeID = EmployeeID,",
						"          s_VendorID = VendorID,",
						"          s_ShipMethodID = ShipMethodID,",
						"          s_OrderDate = OrderDate,",
						"          s_ShipDate = ShipDate,",
						"          s_SubTotal = SubTotal,",
						"          s_TaxAmt = TaxAmt,",
						"          s_Freight = Freight,",
						"          s_TotalDue = TotalDue,",
						"          s_ModifiedDate = ModifiedDate,",
						"          s_seq_id = seq_id,",
						"          s_PurchaseOrderDetailID = PurchaseOrderDetailID,",
						"          s_DueDate = DueDate,",
						"          s_OrderQty = OrderQty,",
						"          s_ProductID = ProductID,",
						"          s_UnitPrice = UnitPrice,",
						"          s_LineTotal = LineTotal,",
						"          s_ReceivedQty = ReceivedQty,",
						"          s_RejectedQty = RejectedQty,",
						"          s_StockedQty = StockedQty,",
						"          s_isactive = isactive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1, select1 lookup(PurchaseOrderID == s_PurchaseOrderID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
						"lookup1 derive(s_isactive = 0) ~> derivedColumn1",
						"alterRow1 derive(seq_id = isUpdate(1)) ~> derivedColumn2",
						"isactiveadding sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          PurchaseOrderID,",
						"          RevisionNumber,",
						"          Status,",
						"          EmployeeID,",
						"          VendorID,",
						"          ShipMethodID,",
						"          OrderDate,",
						"          ShipDate,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate,",
						"          seq_id,",
						"          PurchaseOrderDetailID,",
						"          DueDate,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          LineTotal,",
						"          ReceivedQty,",
						"          RejectedQty,",
						"          StockedQty,",
						"          isactive",
						"     )) ~> sink1",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          PurchaseOrderID,",
						"          RevisionNumber,",
						"          Status,",
						"          EmployeeID,",
						"          VendorID,",
						"          ShipMethodID,",
						"          OrderDate,",
						"          ShipDate,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate,",
						"          seq_id,",
						"          PurchaseOrderDetailID,",
						"          DueDate,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          LineTotal,",
						"          ReceivedQty,",
						"          RejectedQty,",
						"          StockedQty,",
						"          s_isactive",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Parquet1df2sourcecurated')]",
				"[concat(variables('factoryId'), '/datasets/DS_Parquet1')]",
				"[concat(variables('factoryId'), '/datasets/DS_Parquet2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_employees_SCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_employees",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DS_empNew",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_empNew",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_empNew",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          employee_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          hire_date as date,",
						"          department as string,",
						"          gender as string,",
						"          salary as integer,",
						"          region_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          employee_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          hire_date as date,",
						"          department as string,",
						"          gender as string,",
						"          salary as integer,",
						"          region_id as integer,",
						"          isactivecolumn as integer,",
						"          seq_id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"derivedColumn2 keyGenerate(output(seq_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"source1 derive(isactivecolumn = 1) ~> derivedColumn2",
						"source2 select(mapColumn(",
						"          pemployee_id = employee_id,",
						"          pfirst_name = first_name,",
						"          plast_name = last_name,",
						"          pemail = email,",
						"          phire_date = hire_date,",
						"          pdepartment = department,",
						"          pgender = gender,",
						"          psalary = salary,",
						"          pregion_id = region_id,",
						"          pisactivecolumn = isactivecolumn,",
						"          pseq_id = seq_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1, select1 lookup(employee_id == pemployee_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(pemployee_id)) ~> filter1",
						"filter1 select(mapColumn(",
						"          pemployee_id,",
						"          pfirst_name,",
						"          plast_name,",
						"          pemail,",
						"          phire_date,",
						"          pdepartment,",
						"          pgender,",
						"          psalary,",
						"          pregion_id,",
						"          pisactivecolumn,",
						"          pseq_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(pisactivecolumn = 0) ~> derivedColumn3",
						"derivedColumn3 alterRow(updateIf(1==1)) ~> alterRow1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['seq_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          employee_id = pemployee_id,",
						"          first_name = pfirst_name,",
						"          last_name = plast_name,",
						"          email = pemail,",
						"          hire_date = phire_date,",
						"          department = pdepartment,",
						"          gender = pgender,",
						"          salary = psalary,",
						"          region_id = pregion_id,",
						"          isactivecolumn = pisactivecolumn,",
						"          seq_id = pseq_id",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_employees')]",
				"[concat(variables('factoryId'), '/datasets/DS_empNew')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_sink1_SCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_employees",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_empNew",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          employee_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          hire_date as date,",
						"          department as string,",
						"          gender as string,",
						"          salary as integer,",
						"          region_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(isactivecolumn = 0) ~> derivedColumn1",
						"derivedColumn1 keyGenerate(output(seq_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_employees')]",
				"[concat(variables('factoryId'), '/datasets/DS_empNew')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_streamedit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Jsonstream",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_IOT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          messageId as integer,",
						"          deviceId as string,",
						"          temperature as double,",
						"          humidity as double,",
						"          EventProcessedUtcTime as string,",
						"          PartitionId as integer,",
						"          EventEnqueuedUtcTime as string,",
						"          IoTHub as (MessageId as string, CorrelationId as string, ConnectionDeviceId as string, ConnectionDeviceGenerationId as string, EnqueuedTime as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 derive(temperature = round(temperature, 2),",
						"          humidity = round(humidity, 2)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          messageId,",
						"          deviceId,",
						"          temperature,",
						"          humidity,",
						"          EventProcessedUtcTime,",
						"          PartitionId,",
						"          EventEnqueuedUtcTime,",
						"          IoTHub",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Jsonstream')]",
				"[concat(variables('factoryId'), '/datasets/DS_IOT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_transformation_purchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_rawParquetsink1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DS_rawParquetsink2",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_curatedParquettransformed",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "surrogateKey2"
						},
						{
							"name": "cast1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PurchaseOrderID as string,",
						"          RevisionNumber as string,",
						"          Status as string,",
						"          EmployeeID as string,",
						"          VendorID as string,",
						"          ShipMethodID as string,",
						"          OrderDate as string,",
						"          ShipDate as string,",
						"          SubTotal as string,",
						"          TaxAmt as string,",
						"          Freight as string,",
						"          TotalDue as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          PurchaseOrderID as string,",
						"          PurchaseOrderDetailID as string,",
						"          DueDate as string,",
						"          OrderQty as string,",
						"          ProductID as string,",
						"          UnitPrice as string,",
						"          LineTotal as string,",
						"          ReceivedQty as string,",
						"          RejectedQty as string,",
						"          StockedQty as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source2",
						"source1 keyGenerate(output(seq_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"source2 keyGenerate(output(seq_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey2",
						"surrogateKey1 cast(output(",
						"          PurchaseOrderID as integer,",
						"          RevisionNumber as integer,",
						"          Status as integer,",
						"          EmployeeID as integer,",
						"          VendorID as integer,",
						"          ShipMethodID as integer,",
						"          OrderDate as date,",
						"          ShipDate as date,",
						"          SubTotal as integer,",
						"          TaxAmt as string,",
						"          Freight as integer,",
						"          TotalDue as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"surrogateKey2 cast(output(",
						"          PurchaseOrderID as integer,",
						"          PurchaseOrderDetailID as integer,",
						"          DueDate as date,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as integer,",
						"          LineTotal as integer,",
						"          ReceivedQty as integer,",
						"          RejectedQty as integer,",
						"          StockedQty as integer,",
						"          ModifiedDate as date,",
						"          seq_id as long",
						"     ),",
						"     errors: true) ~> cast2",
						"cast1, cast2 join(cast1@PurchaseOrderID == cast2@PurchaseOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_rawParquetsink1')]",
				"[concat(variables('factoryId'), '/datasets/DS_rawParquetsink2')]",
				"[concat(variables('factoryId'), '/datasets/DS_curatedParquettransformed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SCD1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          Name as string,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(upsertIf(1 == 1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Name,",
						"          Salary",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "pract.csv",
						"fileSystem": "container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "scd1_practfile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD1 DF pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SCD1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SCD1')]"
			]
		}
	]
}