{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Document",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_docIncreNew",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_docIncreNew",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_DocIncreUpdate",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DocumentNode as binary,",
				"          DocumentLevel as integer,",
				"          Title as string,",
				"          Owner as integer,",
				"          FolderFlag as boolean,",
				"          FileName as string,",
				"          FileExtension as string,",
				"          Revision as string,",
				"          ChangeNumber as integer,",
				"          Status as integer,",
				"          DocumentSummary as string,",
				"          Document as binary,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          DocumentNode as binary,",
				"          DocumentLevel as integer,",
				"          Title as string,",
				"          Owner as integer,",
				"          FolderFlag as boolean,",
				"          FileName as string,",
				"          FileExtension as string,",
				"          Revision as string,",
				"          ChangeNumber as integer,",
				"          Status as integer,",
				"          DocumentSummary as string,",
				"          Document as binary,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          isactivecolumn as integer,",
				"          seq_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"derivedColumn2 keyGenerate(output(seq_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"source1 derive(isactivecolumn = 0) ~> derivedColumn2",
				"source2 select(mapColumn(",
				"          sDocumentNode = DocumentNode,",
				"          sDocumentLevel = DocumentLevel,",
				"          sTitle = Title,",
				"          sOwner = Owner,",
				"          sFolderFlag = FolderFlag,",
				"          sFileName = FileName,",
				"          sFileExtension = FileExtension,",
				"          sRevision = Revision,",
				"          sChangeNumber = ChangeNumber,",
				"          sStatus = Status,",
				"          sDocumentSummary = DocumentSummary,",
				"          sDocument = Document,",
				"          srowguid = rowguid,",
				"          sModifiedDate = ModifiedDate,",
				"          isactivecolumn,",
				"          seq_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, select1 lookup(Owner == sOwner,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(sOwner)) ~> filter1",
				"filter1 select(mapColumn(",
				"          DocumentNode,",
				"          DocumentLevel,",
				"          Title,",
				"          Owner,",
				"          FolderFlag,",
				"          FileName,",
				"          FileExtension,",
				"          Revision,",
				"          ChangeNumber,",
				"          Status,",
				"          DocumentSummary,",
				"          Document,",
				"          rowguid,",
				"          ModifiedDate,",
				"          isactivecolumn,",
				"          seq_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(isactivecolumn = 0) ~> derivedColumn3",
				"derivedColumn3 alterRow(updateIf(1==1)) ~> alterRow1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['seq_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}