{
	"name": "dataflow3_employees",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable6",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable7",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable7",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable7",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          employee_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          hire_date as date,",
				"          department as string,",
				"          gender as string,",
				"          salary as integer,",
				"          region_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          employee_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          hire_date as date,",
				"          department as string,",
				"          gender as string,",
				"          salary as integer,",
				"          region_id as integer,",
				"          isactivecolumn as integer,",
				"          seq_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"derivedColumn2 keyGenerate(output(seq_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"source1 derive(isactivecolumn = 1) ~> derivedColumn2",
				"source2 select(mapColumn(",
				"          pemployee_id = employee_id,",
				"          pfirst_name = first_name,",
				"          plast_name = last_name,",
				"          pemail = email,",
				"          phire_date = hire_date,",
				"          pdepartment = department,",
				"          pgender = gender,",
				"          psalary = salary,",
				"          pregion_id = region_id,",
				"          pisactivecolumn = isactivecolumn,",
				"          pseq_id = seq_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, select1 lookup(employee_id == pemployee_id,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(pemployee_id)) ~> filter1",
				"filter1 select(mapColumn(",
				"          pemployee_id,",
				"          pfirst_name,",
				"          plast_name,",
				"          pemail,",
				"          phire_date,",
				"          pdepartment,",
				"          pgender,",
				"          psalary,",
				"          pregion_id,",
				"          pisactivecolumn,",
				"          pseq_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(pisactivecolumn = 0) ~> derivedColumn3",
				"derivedColumn3 alterRow(updateIf(1==1)) ~> alterRow1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['seq_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          employee_id = pemployee_id,",
				"          first_name = pfirst_name,",
				"          last_name = plast_name,",
				"          email = pemail,",
				"          hire_date = phire_date,",
				"          department = pdepartment,",
				"          gender = pgender,",
				"          salary = psalary,",
				"          region_id = pregion_id,",
				"          isactivecolumn = pisactivecolumn,",
				"          seq_id = pseq_id",
				"     )) ~> sink2"
			]
		}
	}
}