{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "rawParquetsink1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "rawParquetsink2",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "curatedParquettransformed",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "cast1"
				},
				{
					"name": "cast2"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PurchaseOrderID as string,",
				"          RevisionNumber as string,",
				"          Status as string,",
				"          EmployeeID as string,",
				"          VendorID as string,",
				"          ShipMethodID as string,",
				"          OrderDate as string,",
				"          ShipDate as string,",
				"          SubTotal as string,",
				"          TaxAmt as string,",
				"          Freight as string,",
				"          TotalDue as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source(output(",
				"          PurchaseOrderID as string,",
				"          PurchaseOrderDetailID as string,",
				"          DueDate as string,",
				"          OrderQty as string,",
				"          ProductID as string,",
				"          UnitPrice as string,",
				"          LineTotal as string,",
				"          ReceivedQty as string,",
				"          RejectedQty as string,",
				"          StockedQty as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source2",
				"source1 keyGenerate(output(seq_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"source2 keyGenerate(output(seq_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey1 cast(output(",
				"          PurchaseOrderID as integer,",
				"          RevisionNumber as integer,",
				"          Status as integer,",
				"          EmployeeID as integer,",
				"          VendorID as integer,",
				"          ShipMethodID as integer,",
				"          OrderDate as date,",
				"          ShipDate as date,",
				"          SubTotal as integer,",
				"          TaxAmt as string,",
				"          Freight as integer,",
				"          TotalDue as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"surrogateKey2 cast(output(",
				"          PurchaseOrderID as integer,",
				"          PurchaseOrderDetailID as integer,",
				"          DueDate as date,",
				"          OrderQty as integer,",
				"          ProductID as integer,",
				"          UnitPrice as integer,",
				"          LineTotal as integer,",
				"          ReceivedQty as integer,",
				"          RejectedQty as integer,",
				"          StockedQty as integer,",
				"          ModifiedDate as date,",
				"          seq_id as long",
				"     ),",
				"     errors: true) ~> cast2",
				"cast1, cast2 join(cast1@PurchaseOrderID == cast2@PurchaseOrderID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}